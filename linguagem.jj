options
{
  static = false;
  DEBUG_PARSER = true;
  DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(linguagem)

import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;

public class linguagem
{
  public static void main(String args []) throws ParseException
  {
    try
    {
      System.out.println("Lendo arquivo fonte...");
      FileInputStream fis = new FileInputStream(new File("..//JavaCC//src//fonte.txt"));
      linguagem parser = new linguagem(fis);
      parser.Start();
      System.out.println("Arquivo fonte processado corretamente!");
    }
    catch (IOException e)
    {
      System.out.println("Falha ao abrir arquivo fonte.");
      System.exit(0);
    }
  }
}

PARSER_END(linguagem)

//Caracteres para serem pulados
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\r\n"
}

//Comentários em bloco e em linha
//aqui nao tá funcionando por causa do ["*/"], o jj nao reconhece o */
SKIP:
{
	< "//" (~["\n"])* "\n" >
|	< "/*" (~["*/"])* "*/" >
}

// END OF LINE, delimitador de linha 
TOKEN :
{
	< EOL : ";" >
}

/*Letras e números*/
TOKEN [ IGNORE_CASE ] :
{
	< LETRAS : [ "a"-"z" ] >
|	< DIGITOS : [ "0"-"9" ] >
}

/*Operadores Aritmeticos*/
TOKEN :
{
  < OP_ARIT :
    (
      < MAIS >
    | < MENOS >
    | < MULTIPLICACAO >
    | < DIVISAO >
    ) >
|	< #MAIS : "+" >
|	< #MENOS : "-" >
|	< #MULTIPLICACAO : "*" >
|	< #DIVISAO : "/" >
}

/*Operadores Relacionais*/
TOKEN :
{
  < OP_REL :
    (
      < MAIOR >
    | < MENOR >
    | < IGUALDADE >
    | < DIFERENTE >
    ) >
|	< #MAIOR : ">" >
|	< #MENOR : "<" >
|	< #IGUALDADE : "==" >
|	< #DIFERENTE : "!=" >
}

//Igual
TOKEN :
{
	< IGUAL : "=" >
}

//Tipos de dados
TOKEN :
{
  < TIPO :
    (
      < INT >
    | < STRING >
    | < FLOAT >
    | < VOID >
    ) >
|	< #INT : "inteiro" >
|	< #STRING : "texto" >
|	< #FLOAT : "flutuante" >
|	< #VOID : "vazio" >
}

//Caracteres usados na linguagem
TOKEN :
{
	< PARENTESES_A : "(" >
|	< PARENTESES_F : ")" >
|	< CHAVES_A : "{" >
|	< CHAVES_F : "}" >
|	< VIRGULA : "," >
}

//Repeticao
TOKEN :
{
	< FOR : "para" >
|	< WHILE : "enquanto" >
}

//Decisao
TOKEN:
{
	< IF : "se" >
|	< ELSE : "se nao" >
|	< SWITCH : "switch" >
|	< CASE : "caso" >
|	< BREAK : "sair" >
|	< PADRAO : "padrao" >
}

//Saida e Entrada de dados
TOKEN:
{
 	< PRINT : "mostrar">
|	< GET : "obter" >
}

//Main
TOKEN:
{
	< MAIN : "main" >
}

//Aceitando números com vírgula
void NUMERO():
{}
{
  (< DIGITOS >)+ | (< DIGITOS >)+","(< DIGITOS >)+
}

//Variaveis aceitas
void VARIAVEL():
{}
{
	< LETRAS >(< LETRAS >| < DIGITOS >| "_")*
}

void COMANDO() :
{}
{
	(WHILE() | ATRIBUICAO() | IF() | FOR() | SWITCH() | FUNCAO() | PRINT() | GET() | DECLARACAO())+
}

//Repeticao enquanto
void WHILE() :
{}
{
	<WHILE> <PARENTESES_A> EXP_BOOL() <PARENTESES_F> <CHAVES_A> (COMANDO())+ <CHAVES_F>
}

//Comando de decisao se
void IF() :
{}
{
 	<IF> <PARENTESES_A> EXP_BOOL() <PARENTESES_F> <CHAVES_A> (COMANDO())+ <CHAVES_F>
 	ELSE()
}

//Comando de decisao se nao
void ELSE() :
{}
{
 	<ELSE> <CHAVES_A> (COMANDO())+ <CHAVES_F>
}

//Laço de repetição for
void FOR():
{}
{
  <FOR> <PARENTESES_A> (<DIGITOS>)+ <PARENTESES_F> <CHAVES_A> (COMANDO())+ <CHAVES_F>
}

////AQUI
//Atribuir valor a uma variável
void ATRIBUICAO() :
{}
{
	(VARIAVEL()<IGUAL>EXP_ARITMETICA()<EOL>)+
}

//Verificação booleana
void EXP_BOOL() :
{}
{
	EXP_ARITMETICA() <OP_REL> EXP_ARITMETICA()
}

//
void EXP_ARITMETICA() :
{}
{
	((NUMERO()|VARIAVEL()) (<OP_ARIT> (NUMERO()|VARIAVEL()))*)+
}

////ATÉ AQUI
//Declaração de variáveis - Ex: int var1;
void DECLARACAO() :
{}
{
	<TIPO> VARIAVEL() <EOL>
}

//Saída de Dados
void PRINT() :
{}
{
	<PRINT> <PARENTESES_A> ( <LETRAS> | <DIGITOS> | VARIAVEL() )+ <PARENTESES_F> <EOL>
}

//Entrada de Dados
void GET() :
{}
{
	<GET> <PARENTESES_A> (VARIAVEL() | (VARIAVEL() (<VIRGULA> VARIAVEL())+)+) <PARENTESES_F> <EOL>
}

//Declaração de Função
void FUNCAO() :
{}
{
	<TIPO> VARIAVEL() <PARENTESES_A> ( <TIPO> VARIAVEL() )* <PARENTESES_F> <CHAVES_A> (COMANDO())* <CHAVES_F>
}

//Switch
void SWITCH() :
{}
{
	<SWITCH> <PARENTESES_A> VARIAVEL() <PARENTESES_F> <CHAVES_A> (CASE())+ PADRAO_SWITCH() <CHAVES_F>
}

//Case
void CASE() :
{}
{
	<CASE> <PARENTESES_A> (( <LETRAS> | <DIGITOS> )+ | VARIAVEL() ) <PARENTESES_F> <EOL> (COMANDO())+ <BREAK> <EOL>
}

//Padrao do switch
void PADRAO_SWITCH():
{}
{
	<PADRAO> (COMANDO())+
}

//Funcao principal
void MAIN() :
{}
{
	< MAIN > <CHAVES_A> (COMANDO())* <CHAVES_F>
}
void Start() :
{}
{
	MAIN()< EOF >
}

