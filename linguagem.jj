options
{
  static = false;
  DEBUG_PARSER = true;
  DEBUG_TOKEN_MANAGER = true;
  LOOKAHEAD = 50;
}

PARSER_BEGIN(linguagem)

import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;

public class linguagem
{
  public static void main(String args []) throws ParseException
  {
    try
    {
      System.out.println("Lendo arquivo fonte...");
      FileInputStream fis = new FileInputStream(new File("..//JavaCC//src//fonte.txt"));
      linguagem parser = new linguagem(fis);
      parser.Start();
      System.out.println("Arquivo fonte processado corretamente!");
    }
    catch (IOException e)
    {
      System.out.println("Falha ao abrir arquivo fonte.");
      System.exit(0);
    }
  }
}

PARSER_END(linguagem)

//Caracteres para serem pulados
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\r\n"
| "/*" : COMMENT //quando encontra um /* vai para o estado comment que ignora tudo até achar um */
| < "//" (~["\n"])* "\n"> // quando acha um // ignora tudo até achar um \n
}

< COMMENT > SKIP:
{
	< "*/"> : DEFAULT
| 	< ~[]>
}

// END OF LINE, delimitador de linha 
TOKEN :
{
	< EOL : ";">
}

//Caracteres usados na linguagem
TOKEN :
{
 	< PARENTESES_A : (<P_A>) > | < #P_A : "(">
| 	< PARENTESES_F : (<P_F>) > | < #P_F : ")">
|   < CHAVES_A : (<C_A>)> | < #C_A : "{">
|	< CHAVES_F : (<C_F>)> | < #C_F : "}">
|	< VIRGULA : (<VIR>)> | < #VIR : ",">
|	< SUBLI : (<SUBLINHADO>)> | < #SUBLINHADO : "_">
| 	< IGUAL : (<EQUAL>)> | < #EQUAL : "=">

}

/*Letras e números*/
TOKEN :
{
	< LETRAS : [ "a"-"z", "A"-"Z" ]>
|	< DIGITOS : (["0" - "9"])+>
|	< DIGITOS_SIGNED : ("-")? <DIGITOS> >
|	< DIGITOS_FLUTUANTE : (<DIGITOS> | <DIGITOS_SIGNED>) <VIRGULA> (<DIGITOS>)+ >
}

//Variaveis aceitas
TOKEN :
{
	< VARIAVEL : < SUBLI > (< LETRAS > | < DIGITOS >)+ >
	
}

/*Operadores Aritmeticos*/
TOKEN :
{
  < OP_ARIT :
    (
      < MAIS>
    | < MENOS>
    | < MULTIPLICACAO>
    | < DIVISAO>
    ) >
|	< #MAIS : "+">
|	< #MENOS : "-">
|	< #MULTIPLICACAO : "*">
|	< #DIVISAO : "/">
}

/*Operadores Relacionais*/
TOKEN :
{
  < OP_REL :
    (
      < MAIOR>
    | < MENOR>
    | < IGUALDADE>
    | < DIFERENTE>
    ) >
|	< #MAIOR : ">">
|	< #MENOR : "<">
|	< #IGUALDADE : "==">
|	< #DIFERENTE : "!=">
}

//Tipos de dados
TOKEN :
{
  < TIPO :
    (
      < INT>
    | < STRING>
    | < FLOAT>
    ) >
|	< #INT : "inteiro">
|	< #STRING : "texto">
|	< #FLOAT : "flutuante">
}

//Repeticao
TOKEN :
{
  	< FOR : (<PARA>) > | < #PARA : "para">
|	< WHILE : (<ENQUANTO>) > | < #ENQUANTO : "enquanto">
}

//Decisao
TOKEN:
{
	< IF : (<SE>) > | < #SE : "se">
|	< ELSE : (<SEN>) > | < #SEN : "senao">
|	< SWITCH : (<SW>) > | < #SW : "switch">
|	< CASE : (<CASO>) > | < #CASO : "caso">
|	< BREAK : (<PARAR>) > | < #PARAR : "parar">
|	< PADRAO : (<PA>) > | < #PA : "padrao">
}

//Saida e Entrada de dados
TOKEN:
{
 	< PRINT : (< MOSTRAR>) > | < #MOSTRAR : "mostrar">
|	< GET : (< OBTER>) > | < #OBTER : "obter">
}

//Main
TOKEN:
{
	< MAIN : (< PRINCIPAL>) > | < #PRINCIPAL : "main">
}

//Funcao principal
void MAIN() :
{}
{
	<MAIN> <CHAVES_A> (COMANDO())* <CHAVES_F>
}

void COMANDO() :
{}
{
	(WHILE() | ATRIBUICAO() | IF() | FOR() | SWITCH() | FUNCAO() | PRINT() | GET() | DECLARACAO())
}

//Repeticao enquanto
void WHILE() :
{}
{
	<WHILE> <PARENTESES_A> EXP_BOOL() <PARENTESES_F> <CHAVES_A> (COMANDO())+ <CHAVES_F>
}

//Comando de decisao se
void IF() :
{}
{
 	<IF> <PARENTESES_A> EXP_BOOL() <PARENTESES_F> <CHAVES_A> (COMANDO())+ <CHAVES_F>
 	ELSE()
}

//Comando de decisao se nao
void ELSE() :
{}
{
 	<ELSE> <CHAVES_A> (COMANDO())+ <CHAVES_F>
}

//Laço de repetição for
void FOR():
{}
{
	<FOR> <PARENTESES_A> (<DIGITOS_SIGNED>)+ <PARENTESES_F> <CHAVES_A> (COMANDO())+ <CHAVES_F>
}

//Atribuir valor a uma variável
void ATRIBUICAO() :
{}
{
	(<VARIAVEL> <IGUAL> EXP_ARITMETICA() <EOL>)+
}

//Verificação booleana
void EXP_BOOL() :
{}
{
	(<VARIAVEL> | <DIGITOS> | <DIGITOS_FLUTUANTE> | <DIGITOS_SIGNED>) <OP_REL> (<VARIAVEL> | <DIGITOS> | <DIGITOS_FLUTUANTE> | <DIGITOS_SIGNED>)
}

//Operacoes aritmeticas
void EXP_ARITMETICA() :
{}
{
	(<VARIAVEL> | <DIGITOS> | <DIGITOS_FLUTUANTE> | <DIGITOS_SIGNED>) <OP_ARIT> (<VARIAVEL> | <DIGITOS> | <DIGITOS_FLUTUANTE> | <DIGITOS_SIGNED>)
}

//Declaração de variáveis - Ex: int var1;
void DECLARACAO() :
{}
{
	<TIPO> <VARIAVEL> <EOL>
}

//Saída de Dados
void PRINT() :
{}
{
	<PRINT> <PARENTESES_A> ( <LETRAS> | <DIGITOS_SIGNED > | < DIGITOS > | < DIGITOS_FLUTUANTE > | <VARIAVEL> )+ <PARENTESES_F> <EOL>
}

//Entrada de Dados
void GET() :
{}
{
	<GET> <PARENTESES_A> ( <VARIAVEL> )+ <PARENTESES_F> <EOL>
}

//Declaração de Função
void FUNCAO() :
{}
{
	<TIPO> <VARIAVEL> <PARENTESES_A> ( <TIPO> | <VARIAVEL> )+ <PARENTESES_F> <CHAVES_A> (COMANDO())* <CHAVES_F>
}

//Switch
void SWITCH() :
{}
{
	<SWITCH> <PARENTESES_A> <VARIAVEL> <PARENTESES_F> <CHAVES_A> (CASE())+ PADRAO_SWITCH() <CHAVES_F>
}

//Case
void CASE() :
{}
{
	<CASE> <PARENTESES_A> (( <LETRAS> | <DIGITOS> )+ | <VARIAVEL> ) <PARENTESES_F> <EOL> (COMANDO())* <BREAK> <EOL>
}

//Padrao do switch
void PADRAO_SWITCH():
{}
{
	<PADRAO> (COMANDO())*
}

void Start() :
{}
{
	MAIN() < EOF >
} 