/* Generated By:JavaCC: Do not edit this line. linguagem.java */
import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;

public class linguagem implements linguagemConstants {
  public static void main(String args []) throws ParseException
  {
    try
    {
      System.out.println("Lendo arquivo fonte...");
      FileInputStream fis = new FileInputStream(new File("..//JavaCC//src//fonte.txt"));
      linguagem parser = new linguagem(fis);
      parser.Start();
      System.out.println("Arquivo fonte processado corretamente!");
    }
    catch (IOException e)
    {
      System.out.println("Falha ao abrir arquivo fonte.");
      System.exit(0);
    }
  }

  final public void COMANDO() throws ParseException {
    trace_call("COMANDO");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        WHILE();
        break;
      case VARIAVEL:
        ATRIBUICAO();
        break;
      case IF:
        IF();
        break;
      case FOR:
        FOR();
        break;
      case SWITCH:
        SWITCH();
        break;
      case TIPO:
        FUNCAO();
        break;
      case PRINT:
        PRINT();
        break;
      case GET:
        GET();
        break;
        DECLARACAO();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("COMANDO");
    }
  }

//Repeticao enquanto
  final public void WHILE() throws ParseException {
    trace_call("WHILE");
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PARENTESES_A);
      EXP_BOOL();
      jj_consume_token(PARENTESES_F);
      jj_consume_token(CHAVES_A);
      label_1:
      while (true) {
        COMANDO();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIAVEL:
        case TIPO:
        case FOR:
        case WHILE:
        case IF:
        case SWITCH:
        case PRINT:
        case GET:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(CHAVES_F);
    } finally {
      trace_return("WHILE");
    }
  }

//Comando de decisao se
  final public void IF() throws ParseException {
    trace_call("IF");
    try {
      jj_consume_token(IF);
      jj_consume_token(PARENTESES_A);
      EXP_BOOL();
      jj_consume_token(PARENTESES_F);
      jj_consume_token(CHAVES_A);
      label_2:
      while (true) {
        COMANDO();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIAVEL:
        case TIPO:
        case FOR:
        case WHILE:
        case IF:
        case SWITCH:
        case PRINT:
        case GET:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(CHAVES_F);
      ELSE();
    } finally {
      trace_return("IF");
    }
  }

//Comando de decisao se nao
  final public void ELSE() throws ParseException {
    trace_call("ELSE");
    try {
      jj_consume_token(ELSE);
      jj_consume_token(CHAVES_A);
      label_3:
      while (true) {
        COMANDO();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIAVEL:
        case TIPO:
        case FOR:
        case WHILE:
        case IF:
        case SWITCH:
        case PRINT:
        case GET:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(CHAVES_F);
    } finally {
      trace_return("ELSE");
    }
  }

//Laço de repetição for
  final public void FOR() throws ParseException {
    trace_call("FOR");
    try {
      jj_consume_token(FOR);
      jj_consume_token(PARENTESES_A);
      label_4:
      while (true) {
        jj_consume_token(DIGITOS_SIGNED);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGITOS_SIGNED:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(PARENTESES_F);
      jj_consume_token(CHAVES_A);
      label_5:
      while (true) {
        COMANDO();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIAVEL:
        case TIPO:
        case FOR:
        case WHILE:
        case IF:
        case SWITCH:
        case PRINT:
        case GET:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(CHAVES_F);
    } finally {
      trace_return("FOR");
    }
  }

//Atribuir valor a uma variável
  final public void ATRIBUICAO() throws ParseException {
    trace_call("ATRIBUICAO");
    try {
      label_6:
      while (true) {
        jj_consume_token(VARIAVEL);
        jj_consume_token(IGUAL);
        EXP_ARITMETICA();
        jj_consume_token(EOL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIAVEL:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
      }
    } finally {
      trace_return("ATRIBUICAO");
    }
  }

//Verificação booleana
  final public void EXP_BOOL() throws ParseException {
    trace_call("EXP_BOOL");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIAVEL:
        jj_consume_token(VARIAVEL);
        break;
      case DIGITOS:
        jj_consume_token(DIGITOS);
        break;
      case DIGITOS_FLUTUANTE:
        jj_consume_token(DIGITOS_FLUTUANTE);
        break;
      case DIGITOS_SIGNED:
        jj_consume_token(DIGITOS_SIGNED);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(OP_REL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIAVEL:
        jj_consume_token(VARIAVEL);
        break;
      case DIGITOS:
        jj_consume_token(DIGITOS);
        break;
      case DIGITOS_FLUTUANTE:
        jj_consume_token(DIGITOS_FLUTUANTE);
        break;
      case DIGITOS_SIGNED:
        jj_consume_token(DIGITOS_SIGNED);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("EXP_BOOL");
    }
  }

//Operacoes aritmeticas
  final public void EXP_ARITMETICA() throws ParseException {
    trace_call("EXP_ARITMETICA");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIAVEL:
        jj_consume_token(VARIAVEL);
        break;
      case DIGITOS:
        jj_consume_token(DIGITOS);
        break;
      case DIGITOS_FLUTUANTE:
        jj_consume_token(DIGITOS_FLUTUANTE);
        break;
      case DIGITOS_SIGNED:
        jj_consume_token(DIGITOS_SIGNED);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(OP_ARIT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIAVEL:
        jj_consume_token(VARIAVEL);
        break;
      case DIGITOS:
        jj_consume_token(DIGITOS);
        break;
      case DIGITOS_FLUTUANTE:
        jj_consume_token(DIGITOS_FLUTUANTE);
        break;
      case DIGITOS_SIGNED:
        jj_consume_token(DIGITOS_SIGNED);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("EXP_ARITMETICA");
    }
  }

//Declaração de variáveis - Ex: int var1;
  final public void DECLARACAO() throws ParseException {
    trace_call("DECLARACAO");
    try {
      jj_consume_token(TIPO);
      jj_consume_token(VARIAVEL);
      jj_consume_token(EOL);
    } finally {
      trace_return("DECLARACAO");
    }
  }

//Saída de Dados
  final public void PRINT() throws ParseException {
    trace_call("PRINT");
    try {
      jj_consume_token(PRINT);
      jj_consume_token(PARENTESES_A);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETRAS:
          jj_consume_token(LETRAS);
          break;
        case DIGITOS_SIGNED:
          jj_consume_token(DIGITOS_SIGNED);
          break;
        case DIGITOS:
          jj_consume_token(DIGITOS);
          break;
        case DIGITOS_FLUTUANTE:
          jj_consume_token(DIGITOS_FLUTUANTE);
          break;
        case VARIAVEL:
          jj_consume_token(VARIAVEL);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETRAS:
        case DIGITOS:
        case DIGITOS_SIGNED:
        case DIGITOS_FLUTUANTE:
        case VARIAVEL:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
      }
      jj_consume_token(PARENTESES_F);
      jj_consume_token(EOL);
    } finally {
      trace_return("PRINT");
    }
  }

//Entrada de Dados
  final public void GET() throws ParseException {
    trace_call("GET");
    try {
      jj_consume_token(GET);
      jj_consume_token(PARENTESES_A);
      label_8:
      while (true) {
        jj_consume_token(VARIAVEL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIAVEL:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_8;
        }
      }
      jj_consume_token(PARENTESES_F);
      jj_consume_token(EOL);
    } finally {
      trace_return("GET");
    }
  }

//Declaração de Função
  final public void FUNCAO() throws ParseException {
    trace_call("FUNCAO");
    try {
      jj_consume_token(TIPO);
      jj_consume_token(VARIAVEL);
      jj_consume_token(PARENTESES_A);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIPO:
          jj_consume_token(TIPO);
          break;
        case VARIAVEL:
          jj_consume_token(VARIAVEL);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIAVEL:
        case TIPO:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_9;
        }
      }
      jj_consume_token(PARENTESES_F);
      jj_consume_token(CHAVES_A);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIAVEL:
        case TIPO:
        case FOR:
        case WHILE:
        case IF:
        case SWITCH:
        case PRINT:
        case GET:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_10;
        }
        COMANDO();
      }
      jj_consume_token(CHAVES_F);
    } finally {
      trace_return("FUNCAO");
    }
  }

//Switch
  final public void SWITCH() throws ParseException {
    trace_call("SWITCH");
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(PARENTESES_A);
      jj_consume_token(VARIAVEL);
      jj_consume_token(PARENTESES_F);
      jj_consume_token(CHAVES_A);
      label_11:
      while (true) {
        CASE();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_11;
        }
      }
      PADRAO_SWITCH();
      jj_consume_token(CHAVES_F);
    } finally {
      trace_return("SWITCH");
    }
  }

//Case
  final public void CASE() throws ParseException {
    trace_call("CASE");
    try {
      jj_consume_token(CASE);
      jj_consume_token(PARENTESES_A);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRAS:
      case DIGITOS:
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LETRAS:
            jj_consume_token(LETRAS);
            break;
          case DIGITOS:
            jj_consume_token(DIGITOS);
            break;
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LETRAS:
          case DIGITOS:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_12;
          }
        }
        break;
      case VARIAVEL:
        jj_consume_token(VARIAVEL);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PARENTESES_F);
      jj_consume_token(EOL);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIAVEL:
        case TIPO:
        case FOR:
        case WHILE:
        case IF:
        case SWITCH:
        case PRINT:
        case GET:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_13;
        }
        COMANDO();
      }
      jj_consume_token(BREAK);
      jj_consume_token(EOL);
    } finally {
      trace_return("CASE");
    }
  }

//Padrao do switch
  final public void PADRAO_SWITCH() throws ParseException {
    trace_call("PADRAO_SWITCH");
    try {
      jj_consume_token(PADRAO);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIAVEL:
        case TIPO:
        case FOR:
        case WHILE:
        case IF:
        case SWITCH:
        case PRINT:
        case GET:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_14;
        }
        COMANDO();
      }
    } finally {
      trace_return("PADRAO_SWITCH");
    }
  }

//Funcao principal
  final public void MAIN() throws ParseException {
    trace_call("MAIN");
    try {
      jj_consume_token(MAIN);
      jj_consume_token(CHAVES_A);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIAVEL:
        case TIPO:
        case FOR:
        case WHILE:
        case IF:
        case SWITCH:
        case PRINT:
        case GET:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_15;
        }
        COMANDO();
      }
      jj_consume_token(CHAVES_F);
    } finally {
      trace_return("MAIN");
    }
  }

  final public void Start() throws ParseException {
    trace_call("Start");
    try {
      MAIN();
      jj_consume_token(0);
    } finally {
      trace_return("Start");
    }
  }

  /** Generated Token Manager. */
  public linguagemTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000000,0x20000000,0x20000000,0x20000000,0x8000000,0x20000000,0x20000000,0x3c000000,0x3c000000,0x3c000000,0x3c000000,0x3e000000,0x3e000000,0x20000000,0x20000000,0x20000000,0x20000000,0x0,0x6000000,0x6000000,0x26000000,0x20000000,0x20000000,0x20000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x50115100,0x50115100,0x50115100,0x50115100,0x0,0x50115100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x50115100,0x400000,0x0,0x0,0x0,0x50115100,0x50115100,0x50115100,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public linguagem(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public linguagem(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new linguagemTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public linguagem(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new linguagemTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public linguagem(linguagemTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(linguagemTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[66];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
